// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-cni-plugins/plugins/eni/engine (interfaces: Engine,DHClient)

package mock_engine

import (
	time "time"

	engine "github.com/aws/amazon-ecs-cni-plugins/plugins/eni/engine"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *_MockEngineRecorder
}

// Recorder for MockEngine (not exported)
type _MockEngineRecorder struct {
	mock *MockEngine
}

func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &_MockEngineRecorder{mock}
	return mock
}

func (_m *MockEngine) EXPECT() *_MockEngineRecorder {
	return _m.recorder
}

func (_m *MockEngine) DoesMACAddressMapToIPV4Address(_param0 string, _param1 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "DoesMACAddressMapToIPV4Address", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) DoesMACAddressMapToIPV4Address(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoesMACAddressMapToIPV4Address", arg0, arg1)
}

func (_m *MockEngine) DoesMACAddressMapToIPV6Address(_param0 string, _param1 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "DoesMACAddressMapToIPV6Address", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) DoesMACAddressMapToIPV6Address(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoesMACAddressMapToIPV6Address", arg0, arg1)
}

func (_m *MockEngine) GetAllMACAddresses() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetAllMACAddresses")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) GetAllMACAddresses() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllMACAddresses")
}

func (_m *MockEngine) GetIPV4GatewayNetmask(_param0 string) (string, string, error) {
	ret := _m.ctrl.Call(_m, "GetIPV4GatewayNetmask", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockEngineRecorder) GetIPV4GatewayNetmask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPV4GatewayNetmask", arg0)
}

func (_m *MockEngine) GetIPV6Gateway(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetIPV6Gateway", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) GetIPV6Gateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPV6Gateway", arg0)
}

func (_m *MockEngine) GetIPV6PrefixLength(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetIPV6PrefixLength", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) GetIPV6PrefixLength(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPV6PrefixLength", arg0)
}

func (_m *MockEngine) GetInterfaceDeviceName(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetInterfaceDeviceName", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) GetInterfaceDeviceName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInterfaceDeviceName", arg0)
}

func (_m *MockEngine) GetMACAddressOfENI(_param0 []string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetMACAddressOfENI", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) GetMACAddressOfENI(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMACAddressOfENI", arg0, arg1)
}

func (_m *MockEngine) SetupContainerNamespace(_param0 string, _param1 string, _param2 string, _param3 string, _param4 string, _param5 string, _param6 engine.DHClient, _param7 bool) error {
	ret := _m.ctrl.Call(_m, "SetupContainerNamespace", _param0, _param1, _param2, _param3, _param4, _param5, _param6, _param7)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEngineRecorder) SetupContainerNamespace(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetupContainerNamespace", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func (_m *MockEngine) TeardownContainerNamespace(_param0 string, _param1 string, _param2 bool, _param3 engine.DHClient) error {
	ret := _m.ctrl.Call(_m, "TeardownContainerNamespace", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEngineRecorder) TeardownContainerNamespace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TeardownContainerNamespace", arg0, arg1, arg2, arg3)
}

// Mock of DHClient interface
type MockDHClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDHClientRecorder
}

// Recorder for MockDHClient (not exported)
type _MockDHClientRecorder struct {
	mock *MockDHClient
}

func NewMockDHClient(ctrl *gomock.Controller) *MockDHClient {
	mock := &MockDHClient{ctrl: ctrl}
	mock.recorder = &_MockDHClientRecorder{mock}
	return mock
}

func (_m *MockDHClient) EXPECT() *_MockDHClientRecorder {
	return _m.recorder
}

func (_m *MockDHClient) IsExecutableInPath() bool {
	ret := _m.ctrl.Call(_m, "IsExecutableInPath")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDHClientRecorder) IsExecutableInPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsExecutableInPath")
}

func (_m *MockDHClient) Start(_param0 string, _param1 int) error {
	ret := _m.ctrl.Call(_m, "Start", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDHClientRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1)
}

func (_m *MockDHClient) Stop(_param0 string, _param1 int, _param2 time.Duration, _param3 time.Duration) error {
	ret := _m.ctrl.Call(_m, "Stop", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDHClientRecorder) Stop(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop", arg0, arg1, arg2, arg3)
}
