// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-cni-plugins/plugins/ecs-bridge/engine (interfaces: Engine)

package mock_engine

import (
	"github.com/containernetworking/cni/pkg/types/current"
	gomock "github.com/golang/mock/gomock"
	"github.com/vishvananda/netlink"
)

// Mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *_MockEngineRecorder
}

// Recorder for MockEngine (not exported)
type _MockEngineRecorder struct {
	mock *MockEngine
}

func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &_MockEngineRecorder{mock}
	return mock
}

func (_m *MockEngine) EXPECT() *_MockEngineRecorder {
	return _m.recorder
}

func (_m *MockEngine) AttachHostVethInterfaceToBridge(_param0 string, _param1 *netlink.Bridge) (*current.Interface, error) {
	ret := _m.ctrl.Call(_m, "AttachHostVethInterfaceToBridge", _param0, _param1)
	ret0, _ := ret[0].(*current.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) AttachHostVethInterfaceToBridge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachHostVethInterfaceToBridge", arg0, arg1)
}

func (_m *MockEngine) ConfigureBridge(_param0 *current.Result, _param1 *netlink.Bridge) error {
	ret := _m.ctrl.Call(_m, "ConfigureBridge", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEngineRecorder) ConfigureBridge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigureBridge", arg0, arg1)
}

func (_m *MockEngine) ConfigureContainerVethInterface(_param0 string, _param1 *current.Result, _param2 string) error {
	ret := _m.ctrl.Call(_m, "ConfigureContainerVethInterface", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEngineRecorder) ConfigureContainerVethInterface(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigureContainerVethInterface", arg0, arg1, arg2)
}

func (_m *MockEngine) CreateBridge(_param0 string, _param1 int) (*netlink.Bridge, error) {
	ret := _m.ctrl.Call(_m, "CreateBridge", _param0, _param1)
	ret0, _ := ret[0].(*netlink.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) CreateBridge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBridge", arg0, arg1)
}

func (_m *MockEngine) CreateVethPair(_param0 string, _param1 int, _param2 string) (*current.Interface, string, error) {
	ret := _m.ctrl.Call(_m, "CreateVethPair", _param0, _param1, _param2)
	ret0, _ := ret[0].(*current.Interface)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockEngineRecorder) CreateVethPair(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVethPair", arg0, arg1, arg2)
}

func (_m *MockEngine) DeleteVeth(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "DeleteVeth", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEngineRecorder) DeleteVeth(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVeth", arg0, arg1)
}

func (_m *MockEngine) GetInterfaceIPV4Address(_param0 string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetInterfaceIPV4Address", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) GetInterfaceIPV4Address(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInterfaceIPV4Address", arg0, arg1)
}

func (_m *MockEngine) RunIPAMPluginAdd(_param0 string, _param1 []byte) (*current.Result, error) {
	ret := _m.ctrl.Call(_m, "RunIPAMPluginAdd", _param0, _param1)
	ret0, _ := ret[0].(*current.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) RunIPAMPluginAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunIPAMPluginAdd", arg0, arg1)
}

func (_m *MockEngine) RunIPAMPluginDel(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "RunIPAMPluginDel", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEngineRecorder) RunIPAMPluginDel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunIPAMPluginDel", arg0, arg1)
}
