// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-cni-plugins/plugins/ipam/ipstore (interfaces: IPAllocator)

package mock_ipstore

import (
	net "net"

	gomock "github.com/golang/mock/gomock"
)

// Mock of IPAllocator interface
type MockIPAllocator struct {
	ctrl     *gomock.Controller
	recorder *_MockIPAllocatorRecorder
}

// Recorder for MockIPAllocator (not exported)
type _MockIPAllocatorRecorder struct {
	mock *MockIPAllocator
}

func NewMockIPAllocator(ctrl *gomock.Controller) *MockIPAllocator {
	mock := &MockIPAllocator{ctrl: ctrl}
	mock.recorder = &_MockIPAllocatorRecorder{mock}
	return mock
}

func (_m *MockIPAllocator) EXPECT() *_MockIPAllocatorRecorder {
	return _m.recorder
}

func (_m *MockIPAllocator) Assign(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Assign", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIPAllocatorRecorder) Assign(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Assign", arg0, arg1)
}

func (_m *MockIPAllocator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockIPAllocatorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockIPAllocator) Exists(_param0 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Exists", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIPAllocatorRecorder) Exists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists", arg0)
}

func (_m *MockIPAllocator) Get(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIPAllocatorRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockIPAllocator) GetAvailableIP(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetAvailableIP", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIPAllocatorRecorder) GetAvailableIP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAvailableIP", arg0)
}

func (_m *MockIPAllocator) Release(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Release", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIPAllocatorRecorder) Release(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Release", arg0)
}

func (_m *MockIPAllocator) ReleaseByID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "ReleaseByID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIPAllocatorRecorder) ReleaseByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReleaseByID", arg0)
}

func (_m *MockIPAllocator) SetLastKnownIP(_param0 net.IP) {
	_m.ctrl.Call(_m, "SetLastKnownIP", _param0)
}

func (_mr *_MockIPAllocatorRecorder) SetLastKnownIP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLastKnownIP", arg0)
}

func (_m *MockIPAllocator) Update(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIPAllocatorRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1)
}
