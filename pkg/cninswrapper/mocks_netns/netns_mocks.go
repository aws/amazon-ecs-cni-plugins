// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/containernetworking/cni/pkg/ns (interfaces: NetNS)

package mock_ns

import (
	ns "github.com/containernetworking/cni/pkg/ns"
	gomock "github.com/golang/mock/gomock"
)

// Mock of NetNS interface
type MockNetNS struct {
	ctrl     *gomock.Controller
	recorder *_MockNetNSRecorder
}

// Recorder for MockNetNS (not exported)
type _MockNetNSRecorder struct {
	mock *MockNetNS
}

func NewMockNetNS(ctrl *gomock.Controller) *MockNetNS {
	mock := &MockNetNS{ctrl: ctrl}
	mock.recorder = &_MockNetNSRecorder{mock}
	return mock
}

func (_m *MockNetNS) EXPECT() *_MockNetNSRecorder {
	return _m.recorder
}

func (_m *MockNetNS) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNetNSRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockNetNS) Do(_param0 func(ns.NetNS) error) error {
	ret := _m.ctrl.Call(_m, "Do", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNetNSRecorder) Do(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Do", arg0)
}

func (_m *MockNetNS) Fd() uintptr {
	ret := _m.ctrl.Call(_m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

func (_mr *_MockNetNSRecorder) Fd() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fd")
}

func (_m *MockNetNS) Path() string {
	ret := _m.ctrl.Call(_m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockNetNSRecorder) Path() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Path")
}

func (_m *MockNetNS) Set() error {
	ret := _m.ctrl.Call(_m, "Set")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNetNSRecorder) Set() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set")
}
